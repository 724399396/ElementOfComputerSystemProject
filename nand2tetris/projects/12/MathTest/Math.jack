// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static Array twoToThe; 

    /** Initializes the library. */
    function void init() {
      var int i, j;
      let i = 0;
      let j = 1;
      let twoToThe = Array.new(16);
      while (i < 16) {
        let twoToThe[i] = j;
        let j = j + j;
        let i = i + 1;
      }
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      } else {
        return x;
      }
    }

    /** Returns the product of x and y. */
    function int multiply(int ax, int ay) {
      var int sum, shiftedX, j, x, y, sig;
      let sum = 0;
      let j = 0;
      let x = Math.abs(ax);
      let y = Math.abs(ay);
      let shiftedX = x;
      let sig = Math.sig(ax,ay);
      while (j < 16) {
        if (Math.bit(y, j)) {
          let sum = sum + shiftedX;
        }
        let shiftedX = shiftedX + shiftedX;
        let j = j + 1;
      }
      if (sig) {
        return sum;
      } else {
        return -sum;
      }
    }

    /** Returns the integer part of x/y. */
    function int divide(int ax, int ay) {
      var int q, tmp, tmp2, x, y, sig, res;
      let x = Math.abs(ax);
      let y = Math.abs(ay);
      let sig = Math.sig(ax,ay);
      if (y > x) {
        let res = 0;
      } else {
        let q = Math.divide(x,y+y);
        let tmp = 2 * q * y;
        let tmp2 = x - tmp;
        if (tmp2 < y) {
          let res = 2 * q;
        } else {
          let res = 2 * q + 1;
        }
      }
      if (sig) {
        return res;
      } else {
        return -res;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y, n, tmp, tmp2;
      let y = 0;
      let n = 7;
      while (~(n < 0)) {
        let tmp2 = y + twoToThe[n];
        let tmp = Math.multiply(tmp2,tmp2);
        if (~(tmp > x)) {
          if (tmp > 0) {
             let y = tmp2;
          }
        }
        let n = n - 1;
      }
      return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
       if (a > b) {
         return a;
       } else {
         return b;
       }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
       if (a > b) {
         return b;
       } else {
         return a;
       }
    }

    function boolean bit(int x, int j) {
      return (x | twoToThe[j]) = x;
    }
 
    function boolean sig(int x, int y) {
      if (x > 0) {
        if (y > 0) {
          return true;
        } else {
          return false;
        }
      } else {
        if (y > 0) {
          return false;
        } else {
          return true;
        }
      }
    }
}
