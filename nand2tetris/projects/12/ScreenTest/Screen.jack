// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static int base, max;
    static boolean color;
    static Ararry two2The;

    /** Initializes the Screen. */
    function void init() {
      var int i, num;
      let base = 16384;
      let max = 23 * 32;
      let two2The = Array.new(16);
      let i = 0;
      let num = 1;
      let color = true;
      while (i < 16) {
        let two2The[i] = num;
        let num = num + num;
        let i = i + 1;
      }
      return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
      var int i;
      let i = 0;
      while (i < max) {
        let base[i] = 0;
      }
      return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
      var int row, col, loc, old, new, r;
      let row = Math.multiply(y, 32);
      let col = Math.divide(x, 16);
      let loc = row + col;
      let old = base[loc];
      let r = two2The[Screen.rem(x, 16)];
      if (color) {
         let new = r | old;
      } else {
         let new = old & ~r;
      }
      let base[loc] = new;
      return;
    }

    function int rem(int i, int j) {
      var int q, m;
      let q = Math.divide(i, j);
      let m = q * j;
      return i - m;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int a,b,dx,dy,adyMinusbdx;
      let a = 0;
      let b = 0;
      let dx = x2 - x1;
      if (dx < 0) {
        do Screen.drawLine(x2,y2,x1,y1);
        return;
      }
      let dy = y2 - y1;
      let adyMinusbdx = 0;
      while ( ((dx > 0 & ~(a > dx)) | (dx < 0 & ~(a < dx)))
            & ((dy > 0 & ~(b > dy)) | (dy < 0 & ~(b < dy))) ) {
        do Screen.drawPixel(x1 + a, y1 + b);
        if (adyMinusbdx < 0) {
           if (dx > 0) {
              let a = a + 1;           
           } else {
              let a = a - 1;
           }
           if (dy > 0) {
              let adyMinusbdx = adyMinusbdx + dy;
           } else {
              let adyMinusbdx = adyMinusbdx - dy;
           }
        } else {
           if (dy > 0) {
             let b = b + 1;
           } else {
             let b = b - 1;
           }
           if (dx > 0) {
             let adyMinusbdx = adyMinusbdx - dx;
           } else {
             let adyMinusbdx = adyMinusbdx + dx;
           }
        }
      }
      while (~(a > dx)) {
        do Screen.drawPixel(x1 + a, y1 + b);
        let a = a + 1;
      }
      while (~(b > dy)) {
        do Screen.drawPixel(x1 + 1, y1 + b);
        let b = b + 1;
      }
      return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int i, j;
      let i = x1;
      while (~(i > x2)) {
        do Screen.drawLine(i, y1, i, y2);
        let i = i + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
      var int rs, dy, tmp;
      let dy = -r;
      let rs = r * r;
      while(~(dy > r)) {
        let tmp = Math.sqrt(rs - (dy * dy));
        do Screen.drawLine(cx - tmp, cy + dy, cx + tmp, cy + dy);
        let dy = dy + 1;
      }
      return;
    }
}
