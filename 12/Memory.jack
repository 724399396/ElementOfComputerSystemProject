// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = 0;
        let heap[1] = 14335;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array freelist, pre;
        let freelist = heap;
        let pre = 0;
        while (true) {
            if (freelist[1] > (size + 1)) {
                if (pre = 0) {
                    let heap = heap + size + 2;
                    let heap[0] = 0;
                    let heap[1] = freelist[1] - size - 2;
                } else {
                    let pre[0] = freelist[0];
                }
                let freelist[1] = size;
                let freelist[0] = 0;
                return freelist + 2;
            }
            if (freelist[0] = 0) {
                return 0;
            }
            let freelist = freelist[0];
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array freelist;
        let freelist = heap;
        while (freelist[0] > 0) {
            let freelist = freelist[0];
        }
        let freelist[0] = o;
        return;
    }    
}
