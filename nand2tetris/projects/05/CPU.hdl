// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution  xxxa cccc ccdd djjj
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    //Control
    Mux16(a = aOut, b = inM, sel = instruction[3], out = daIN); // a 
    Mux(a = false, b = true, sel = instruction[12], out = writeM); // writeM
    
    
    // pc flag
    And(a = instruction[13], b = ng, out = po1);
    And(a = instruction[14], b = zr, out = po2);
    Or(a = ng, b = zr, out = ngOzr);
    Not(in = ngOzr, out = nNgOZr);
    And(a = instruction[15], b = nNgOZr, out = po3);
    And(a = instruction[13], b = instruction[14], out = a1314);
    And(a = instruction[15], b = a1314, out = a131415);
    Or(a = po1, b = po2, out = pof1);
    Or(a = po3, b = a131415, out = pof2);
    Or(a = pof1, b = pof2, out = pcLFlag);
    Not(in = pcLFlag, out = nPcLFlag);

    //PC
    PC(in = aOut, reset = reset, load = pcLFlag, inc = nPcLFlag, out[0..14] = pc);

    //A
    Mux16(a[0..14] = instruction[0..14], a[15] = false, b = aluOut, sel = instruction[0], out = aMOut);
    Mux(a = true, b = instruction[10], sel = instruction[0], out = setAFlag);
    ARegister(in = aMOut, load = setAFlag, out = aOut, out[0..14] = addressM);
    
    //D
    DRegister(in = aluOut, load = instruction[11], out = dOut);

   //ALU
   ALU(x = dOut, y = daIN,zx=instruction[4],nx=instruction[5],zy=instruction[6],ny=instruction[7],f= instruction[8],no= instruction[9],out= outM, out = aluOut, zr = zr, ng = ng) ;

   
   
}