// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
    field Array array;
    field int length, cur;
      
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
      let length = maxLength;
      if (maxLength = 0) {
        return this;
      } else {
        let array = Array.new(maxLength);       
        let cur = 0;
        return this;
      }
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
      if (length > 0) {
        do array.dispose();
      }
      do Memory.deAlloc(this);
      return;
    }

    /** Returns the current length of this String. */
    method int length() {
      return cur;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
      return array[j];
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
      let array[j] = c;
      if (~(j < cur)) {
         let cur = j + 1;
      }
      return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
      let array[cur] = c;
      let cur = cur + 1;
      return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
      let cur = cur - 1;
      let array[cur] = 0;
      return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
      var int v, i, d, tmp;
      var boolean neg;
      let v = 0;
      let i = 0;
      while (i < cur) {
        let tmp = array[i];
        if (tmp = 45) {
           let neg = true;       
        } else {
          let d = tmp - 48;
          let v = v * 10 + d;
        }
        let i = i + 1;
      }
      if (neg) {
        return -v;
      } else {
        return v;
      }
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int n) {
      var String tmp, tl;
      var int i;
      let tmp = String.int2String(n,n);
      let tl = tmp.length();
      let i = 0;
      while (i < tl) {
        do setCharAt(i, tmp.charAt(i));
        let i = i + 1;
      }
      let cur = tl;
      return;
    }

    function String int2String(int number, int sn) {
      var int lastDigit, n;
      var String tmp;
      let n = Math.abs(number);
      let lastDigit = String.rem(n, 10);
      if (n < 10) {
        if (sn < 0) {
          let tmp = String.new(String.intLength(sn));
          do tmp.appendChar(45);
        } else {
          let tmp = String.new(String.intLength(sn));
        }
        do tmp.appendChar(lastDigit + 48);
        return tmp;
      } else {
        let tmp = String.int2String(Math.divide(n, 10), sn);
        let tmp = tmp.appendChar(lastDigit+48);
        return tmp;
      }
    }

    function Int rem(int i, int j) {
      var int tmp;
      let tmp = Math.divide(i, j);
      return i - Math.multiply(tmp, j);
    }

    function Int intLength(int number) {
      var int res, n;
      let res = 1;
      let n = Math.abs(number);
      while (n > 9) {
        let n = Math.divide(n, 10);
        let res = res + 1;
      }
      if (number < 0) {
        return res + 1;
      } else {
        return res;
      }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
