// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color; 
    static int base, end;

    /** Initializes the Screen. */
    function void init() {
        let base = 16384;
        let end = 24576;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = base;
        while (i < end) {
            do Screen.drawPixel(i, false);
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        let address = (32 * y) + (x / 16);
        let value = Memory.peek(base + address);
        if (color) {
            let value = value | Math.twoToThe(Math.reminder(x, 16));
        } else {
            let value = value & ~(Math.twoToThe(Math.reminder(x, 16)));
        }
        do Memory.poke(base+address, value);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, a, b, diff;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let a = 0; 
        let b = 0;
        let diff = 0;

        if (dx = 0) {
            while (~(b = dy)) {
                do Screen.drawPixel(x1, y1+b);
                if (dy > 0) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
            }

            return;
        }

        if (dy = 0) {
            while (~(a = dx)) {
                do Screen.drawPixel(x1+a, y1);
                if (dx > 0) {
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
            }
            return;
        }

        while (~(a = dx) | ~(b = dy)) {
            do Screen.drawPixel(x1 + a, y1+b);
            if (diff > 0) {
                if (dx > 0) {
                    let a = a + 1;
                } else {
                    let a = a - 1;
                }
                if (dy > 0) {
                    let diff = diff - dy;
                } else {
                    let diff = diff + dy;
                }
            } else {
                if (dy > 0) {
                    let b = b + 1;
                } else {
                    let b = b - 1;
                }
                if (dx > 0) {
                    let diff = diff + dx;
                } else {
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, tmp;
        let dy = -r;
        while (~(dy > 0)) {
            let tmp = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawLine(x - tmp, y + dy, x + tmp, y + dy);
            do Screen.drawLine(x - tmp, y - dy, x + tmp, y - dy);
            let dy = dy + 1;
        }
        return;
    }
}
